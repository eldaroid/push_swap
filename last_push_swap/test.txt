Резюме:
Этот проект заставит вас сортировать данные в стеке с помощью ограниченного набора инструкций, используя минимально возможное количество действий. Чтобы добиться успеха, вам придется манипулировать различными типами алгоритмов и выбрать одно (из многих) наиболее подходящее решение для оптимизированной сортировки данных.

Проект Push_swap - очень простой и очень эффективный алгоритм алгоритма: данные нужно будет отсортировать. В вашем распоряжении набор значений типа int, 2 стека и набор инструкций для управления обоими стеками.
Ваша цель? Напишите 2 программы на C:
• Первая именованная программа проверки, которая принимает целочисленные аргументы и считывает инструкции на стандартный вывод. После прочтения программа проверки выполняет их и отображает ОК, если целые числа отсортированы. В противном случае будет отображаться КО.
• Второй называется push_swap, который вычисляет и отображает на стандартном выходе наименьшую программу, используя язык инструкций Push_swap, который сортирует полученные целочисленные аргументы. Легко?
Посмотрим ...

Написание алгоритма сортировки - всегда очень важный шаг в жизни кодировщика, потому что часто это первое знакомство с концепцией сложности. Алгоритмы сортировки и их сложность являются частью классических вопросов, обсуждаемых во время собеседований. Возможно, сейчас самое время взглянуть на эти концепции, потому что вам придется столкнуться с ними однажды. Цели обучения этого проекта - строгость, использование C и использование базовых алгоритмов. Особенно если посмотреть на сложность этих базовых алгоритмов. Сортировка значений проста. Сортировка их наиболее быстрым способом менее проста, особенно потому, что от одной конфигурации целых чисел к другой наиболее эффективный алгоритм сортировки может различаться.

Основные инструкции
• Этот проект будет исправляться только реальными людьми. Таким образом, вы можете свободно организовывать и называть свои файлы по своему усмотрению, хотя вам необходимо соблюдать некоторые требования, перечисленные ниже.
• Первый исполняемый файл должен называться checker, а второй - push_swap.
• Вы должны отправить Makefile. Этот Makefile должен скомпилировать проект и содержать обычные правила. Он может только перекомпилировать программу при необходимости.
• Если вы умен, вы будете использовать свою библиотеку для этого проекта, отправьте также свою папку libft, включая собственный Makefile в корне вашего репозитория. Ваш Makefile должен будет скомпилировать библиотеку, а затем скомпилировать ваш проект.
• Глобальные переменные запрещены.
• Ваш проект должен быть написан на C в соответствии с Нормой.
• Вы должны осторожно обращаться с ошибками. Ни в коем случае ваша программа не может завершиться неожиданным образом (ошибка сегментации, ошибка шины, двойное освобождение и т. Д.).
• Ни одна из программ не может иметь утечек памяти.
• Вам нужно будет отправить в корень своей папки файл с именем author, содержащий ваше имя пользователя, за которым следует '\ n'
$> cat -e автор
xlogin $
• В рамках обязательной части вам разрешается использовать следующие функции:
◦ написать
◦ читать
◦ malloc
◦ бесплатно
◦ выход
• Вы можете задавать вопросы на форуме и в Slack ...

 Game rules
• The game is composed of 2 stacks named a and b.
• To start with:
◦ a contains a random number of either positive or negative numbers without
any duplicates.
◦ b is empty
• The goal is to sort in ascending order numbers into stack a.
• To do this you have the following operations at your disposal:
sa : swap a - swap the first 2 elements at the top of stack a. Do nothing if there is only one or no elements).
sb : swap b - swap the first 2 elements at the top of stack b. Do nothing if there is only one or no elements).
ss : sa and sb at the same time.
pa : push a - take the first element at the top of b and put it at the top of a. Do nothing if b is empty.
pb : push b - take the first element at the top of a and put it at the top of b. Do nothing if a is empty.
ra : rotate a - shift up all elements of stack a by 1. The first element becomes the last one.
rb : rotate b - shift up all elements of stack b by 1. The first element becomes the last one.
rr : ra and rb at the same time.
rra : reverse rotate a - shift down all elements of stack a by 1. The last element becomes the first one.
rrb : reverse rotate b - shift down all elements of stack b by 1. The last element becomes the first one.
rrr : rra and rrb at the same time.

  The “checker” program

• Вам нужно написать программу с именем checker, которая будет получать в качестве аргумента стек, отформатированный как список целых чисел. Первый аргумент должен быть наверху стека (будьте осторожны с порядком). Если аргумент не задан, проверка останавливается и ничего не отображает.
• После этого Checker будет ждать и читать инструкции на стандартном вводе, за каждой инструкцией будет следовать ’\ n’. После того, как все инструкции будут прочитаны, программа проверки выполнит их в стеке, полученном в качестве аргумента.
• Если после выполнения этих инструкций стек a фактически отсортирован, а b пуст, тогда программа проверки должна отобразить на стандартном выходе «OK», за которым следует a ’\ n’. Во всех остальных случаях программа проверки должна отображать «KO» с последующим «\ n» на стандартном выходе.
• В случае ошибки вы должны отобразить ошибку, за которой следует '\ n' для стандартной ошибки. К ошибкам относятся, например: некоторые аргументы не являются целыми числами, некоторые аргументы больше целого числа, есть дубликаты, инструкция не существует и / или имеет неправильный формат.
Благодаря программе проверки вы сможете проверить, действительно ли список инструкций, которые вы создадите с помощью программы push_swap, правильно сортирует стек.